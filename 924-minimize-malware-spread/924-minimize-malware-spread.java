class Solution {
    
    int[] parent, size;
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
                
        int n = graph.length;
        
        parent = new int[n];
        size = new int[n];
        
        for( int i=0 ; i<n ; i++ ){
            parent[i] = i;
            size[i] = 1;
        }
        
        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<n ; j++){                
                if( i!=j && graph[i][j] == 1 ){
                    union(i,j);
                }                
            }
        }
        
        // now count ifections
        // find if two of initial share o pos
        int[] count = new int[n];
        
        for(int i : initial){            
            int pi = find(i);
            count[pi]++;
        }
        
        Arrays.sort( initial );
        
        int mi = initial[0]; // idx
        int ms = 0; // malware isze
        
        for(int i: initial){
            
            int ri = find(i);
            if( count[ri] == 1 ){                
                if( size[ri] > ms ){
                    ms = size[ri];
                    mi = i;
                }                
            }            
        }
        return mi;
    }
    
    int find(int s){        
        if (parent[s] == s) return s;        
        return parent[s] = find( parent[s] );        
    }
    
    void union(int x, int y){
        
        int l1 = find(x);
        int l2 = find(y);
        
        if( l1 == l2 ){
            return ;
        }
        
        if( size[l1] > size[l2] ){
            parent[l2] = l1;
            size[l1] += size[l2];
        }else{
            parent[l1] = l2;
            size[l2] += size[l1];
        }
        
    }
    
}